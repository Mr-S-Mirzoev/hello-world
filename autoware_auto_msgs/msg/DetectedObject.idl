#include "autoware_auto_msgs/msg/LaneArray.idl"

#include "sensor_msgs/msg/PointCloud2.idl"
#include "sensor_msgs/msg/Image.idl"

#include "std_msgs/msg/Header.idl"
#include "std_msgs/msg/ColorRGBA.idl"

#include "geometry_msgs/msg/PolygonStamped.idl"
#include "geometry_msgs/msg/Pose.idl"
#include "geometry_msgs/msg/Twist.idl"
#include "geometry_msgs/msg/Vector3.idl"

module autoware_auto_msgs {
    module msg {

        module DetectedObject_Constants {
            const uint8 INDICATOR_LEFT = 0;
            const uint8 INDICATOR_RIGHT = 1;
            const uint8 INDICATOR_BOTH = 2;
            const uint8 INDICATOR_NONE = 3;
            const uint8 FORWARD_STATE = 0;
            const uint8 STOPPING_STATE = 1;
            const uint8 BRANCH_LEFT_STATE = 2;
            const uint8 BRANCH_RIGHT_STATE = 3;
            const uint8 YIELDING_STATE = 4;
            const uint8 ACCELERATING_STATE = 5;
            const uint8 SLOWDOWN_STATE = 6;
        };

        struct DetectedObject {

            std_msgs::msg::Header header;

            uint32 id;
            string label;

            @verbatim (language="comment", text=
            " Score as defined by the detection, Optional")
            float score;
            
            @verbatim (language="comment", text=
            " Define this object specific color")
            std_msgs::msg::ColorRGBA color;

            @verbatim (language="comment", text=
            " Defines if this object is valid, or invalid as defined by the filtering")
            boolean valid;





            @verbatim (language="comment", text=
            " 3D Space coordinate frame of the object, required if pose and dimensions are defines")
            string space_frame;

            geometry_msgs::msg::Pose pose;
            geometry_msgs::msg::Vector3 dimensions;
            geometry_msgs::msg::Vector3 variance;
            geometry_msgs::msg::Twist velocity;
            geometry_msgs::msg::Twist acceleration;

            sensor_msgs::msg::PointCloud2 pointcloud;

            geometry_msgs::msg::PolygonStamped convex_hull;
            autoware_auto_msgs::msg::LaneArray candidate_trajectories;

            boolean pose_reliable;
            boolean velocity_reliable;
            boolean acceleration_reliable;





            @verbatim (language="comment", text=
            " Image coordinate Frame," "\n"
            " Required if x,y,w,h defined" "\n")
            string image_frame;

            @verbatim (language="comment", text=
            " X coord in image space(pixel) of the initial point of the Rect")
            int32 x;
            @verbatim (language="comment", text=
            " Y coord in image space(pixel) of the initial point of the Rect")
            int32 y;

            @verbatim (language="comment", text=
            " Width of the Rect in pixels")
            int32 width;
            @verbatim (language="comment", text=
            " Height of the Rect in pixels")
            int32 height;

            @verbatim (language="comment", text=
            " Angle [0 to 2*PI), allow rotated rects")
            float angle;

            sensor_msgs::msg::Image roi_image;





            @verbatim (language="comment", text=
            " Indicator information")
            uint8 indicator_state;

            @verbatim (language="comment", text=
            " Behavior State of the Detected Object")
            uint8 behavior_state;

            
            
            sequence<string> user_defined_info;

        };
    };
};
